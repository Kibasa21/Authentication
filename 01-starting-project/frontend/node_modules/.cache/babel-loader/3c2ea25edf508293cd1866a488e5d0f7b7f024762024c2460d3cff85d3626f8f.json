{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\Memberr\\\\React_classes\\\\Authentication\\\\01-starting-project\\\\frontend\\\\src\\\\pages\\\\Authentication.js\";\nimport { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport async function action({\n  request\n}) {\n  const searchParams = new URL(request.url).searchParams; //O construtor URL cria um novo objeto URL, que representa o URL do documento atual\n  const mode = searchParams.get('mode') || 'login'; //O método get() retorna o valor do primeiro parâmetro de URL especificado com o nome 'mode', se não houver nenhum parâmetro com esse nome, ele retorna 'login\n  //Isso é necessário pq a action precisa saber se o usuário está tentando fazer login ou criar um novo usuário\n\n  if (mode !== 'login' && mode !== 'signup') {\n    throw json({\n      message: 'Unsupported mode'\n    }, {\n      status: 422\n    }); //O método json() retorna um objeto JSON com a mensagem 'Unsupported mode' e o status 422\n  }\n  const data = await request.formData(); //O método formData() retorna um objeto FormData que representa os dados contidos no corpo do formulário\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password')\n  };\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(authData)\n  });\n  if (response.status === 422 || response.status === 401) {\n    //O status 422 significa que a requisição foi bem-sucedida, mas o servidor não pôde processar a entidade enviada, e o status 401 significa que a requisição não foi autorizada\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: 'Could not authenticate user.'\n    }, {\n      status: 500\n    }); //O status 500 significa que houve um erro interno no servidor\n  }\n  const resData = await response.json(); //O método json() retorna um objeto JSON com os dados da resposta\n  const token = resData.token;\n  localStorage.setItem('token', token); //O método setItem() define o valor do item especificado no LocalStorage, o LocalStorage é um objeto que armazena dados no navegador do usuário\n  const expiration = new Date(); //O construtor Date cria um novo objeto Date que representa a data e a hora atuais\n  expiration.setHours(expiration.getHours() + 1); //O método setHours() define a hora de uma data especificada de acordo com a hora local, usei isso para definir o tempo de expiração do token\n  localStorage.setItem('expiration', expiration.toISOString()); //O método toISOString() retorna uma string em formato ISO (YYYY-MM-DDTHH:mm:ss.sssZ) representando a data e a hora do objeto Date\n\n  return redirect('/');\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["json","redirect","AuthForm","jsxDEV","_jsxDEV","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","searchParams","URL","url","mode","get","message","status","data","formData","authData","email","password","response","fetch","method","headers","body","JSON","stringify","ok","resData","token","localStorage","setItem","expiration","Date","setHours","getHours","toISOString","$RefreshReg$"],"sources":["C:/Users/LENOVO/Documents/Memberr/React_classes/Authentication/01-starting-project/frontend/src/pages/Authentication.js"],"sourcesContent":["import { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\n\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\nexport async function action({request}) {\n\n  const searchParams = new URL(request.url).searchParams; //O construtor URL cria um novo objeto URL, que representa o URL do documento atual\n  const mode = searchParams.get('mode') || 'login'; //O método get() retorna o valor do primeiro parâmetro de URL especificado com o nome 'mode', se não houver nenhum parâmetro com esse nome, ele retorna 'login\n  //Isso é necessário pq a action precisa saber se o usuário está tentando fazer login ou criar um novo usuário\n  \n  if(mode!=='login' && mode!=='signup') {\n    throw json({message: 'Unsupported mode'}, {status: 422});//O método json() retorna um objeto JSON com a mensagem 'Unsupported mode' e o status 422\n  }\n  \n  const data = await request.formData(); //O método formData() retorna um objeto FormData que representa os dados contidos no corpo do formulário\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password'),\n  };\n\n  const response = await fetch('http://localhost:8080/' + mode,{\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(authData),\n  });\n\n  if(response.status === 422 || response.status === 401){//O status 422 significa que a requisição foi bem-sucedida, mas o servidor não pôde processar a entidade enviada, e o status 401 significa que a requisição não foi autorizada\n    return response;\n  }\n\n  if(!response.ok) {\n    throw json({message: 'Could not authenticate user.'}, {status: 500});//O status 500 significa que houve um erro interno no servidor\n  }\n\n  const resData = await response.json(); //O método json() retorna um objeto JSON com os dados da resposta\n  const token = resData.token;\n\n  localStorage.setItem('token', token);//O método setItem() define o valor do item especificado no LocalStorage, o LocalStorage é um objeto que armazena dados no navegador do usuário\n  const expiration = new Date(); //O construtor Date cria um novo objeto Date que representa a data e a hora atuais\n  expiration.setHours(expiration.getHours() + 1);//O método setHours() define a hora de uma data especificada de acordo com a hora local, usei isso para definir o tempo de expiração do token\n  localStorage.setItem('expiration', expiration.toISOString());//O método toISOString() retorna uma string em formato ISO (YYYY-MM-DDTHH:mm:ss.sssZ) representando a data e a hora do objeto Date\n  \n  return redirect('/');\n}"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,oBAAOD,OAAA,CAACF,QAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB;AAACC,EAAA,GAFQL,kBAAkB;AAI3B,eAAeA,kBAAkB;AAEjC,OAAO,eAAeM,MAAMA,CAAC;EAACC;AAAO,CAAC,EAAE;EAEtC,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACF,YAAY,CAAC,CAAC;EACxD,MAAMG,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC;EAClD;;EAEA,IAAGD,IAAI,KAAG,OAAO,IAAIA,IAAI,KAAG,QAAQ,EAAE;IACpC,MAAMhB,IAAI,CAAC;MAACkB,OAAO,EAAE;IAAkB,CAAC,EAAE;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC,CAAC;EAC3D;EAEA,MAAMC,IAAI,GAAG,MAAMR,OAAO,CAACS,QAAQ,CAAC,CAAC,CAAC,CAAC;EACvC,MAAMC,QAAQ,GAAG;IACfC,KAAK,EAAEH,IAAI,CAACH,GAAG,CAAC,OAAO,CAAC;IACxBO,QAAQ,EAAEJ,IAAI,CAACH,GAAG,CAAC,UAAU;EAC/B,CAAC;EAED,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGV,IAAI,EAAC;IAC3DW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAGG,QAAQ,CAACN,MAAM,KAAK,GAAG,IAAIM,QAAQ,CAACN,MAAM,KAAK,GAAG,EAAC;IAAC;IACrD,OAAOM,QAAQ;EACjB;EAEA,IAAG,CAACA,QAAQ,CAACO,EAAE,EAAE;IACf,MAAMhC,IAAI,CAAC;MAACkB,OAAO,EAAE;IAA8B,CAAC,EAAE;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC,CAAC;EACvE;EAEA,MAAMc,OAAO,GAAG,MAAMR,QAAQ,CAACzB,IAAI,CAAC,CAAC,CAAC,CAAC;EACvC,MAAMkC,KAAK,GAAGD,OAAO,CAACC,KAAK;EAE3BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC,CAAC;EACrC,MAAMG,UAAU,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC,CAAC;EAC/BD,UAAU,CAACE,QAAQ,CAACF,UAAU,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC/CL,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,UAAU,CAACI,WAAW,CAAC,CAAC,CAAC,CAAC;;EAE7D,OAAOxC,QAAQ,CAAC,GAAG,CAAC;AACtB;AAAC,IAAAS,EAAA;AAAAgC,YAAA,CAAAhC,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}