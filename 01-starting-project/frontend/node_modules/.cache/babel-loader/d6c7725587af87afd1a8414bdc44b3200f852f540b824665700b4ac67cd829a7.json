{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\Memberr\\\\React_classes\\\\Authentication\\\\01-starting-project\\\\frontend\\\\src\\\\pages\\\\Authentication.js\";\nimport { json } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport async function action({\n  request\n}) {\n  const searchParams = new URL(request.url).searchParams; //O construtor URL cria um novo objeto URL, que representa o URL do documento atual\n  const mode = searchParams.get('mode') || 'login'; //O método get() retorna o valor do primeiro parâmetro de URL especificado com o nome 'mode', se não houver nenhum parâmetro com esse nome, ele retorna 'login\n  //Isso é necessário pq a action precisa saber se o usuário está tentando fazer login ou criar um novo usuário\n\n  if (mode !== 'login' && mode !== 'signup') {\n    throw json({\n      message: 'Invalid mode'\n    }, {\n      status: 400\n    });\n  }\n  const data = await request.formData(); //O método formData() retorna um objeto FormData que representa os dados contidos no corpo do formulário\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password')\n  };\n  fetch('http://localhost:8080/' + mode);\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["json","AuthForm","jsxDEV","_jsxDEV","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","searchParams","URL","url","mode","get","message","status","data","formData","authData","email","password","fetch","$RefreshReg$"],"sources":["C:/Users/LENOVO/Documents/Memberr/React_classes/Authentication/01-starting-project/frontend/src/pages/Authentication.js"],"sourcesContent":["import { json } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\n\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\nexport async function action({request}) {\n\n  const searchParams = new URL(request.url).searchParams; //O construtor URL cria um novo objeto URL, que representa o URL do documento atual\n  const mode = searchParams.get('mode') || 'login'; //O método get() retorna o valor do primeiro parâmetro de URL especificado com o nome 'mode', se não houver nenhum parâmetro com esse nome, ele retorna 'login\n  //Isso é necessário pq a action precisa saber se o usuário está tentando fazer login ou criar um novo usuário\n  \n  if(mode!=='login' && mode!=='signup') {\n    throw json({message: 'Invalid mode'}, {status: 400});\n  }\n  \n  const data = await request.formData(); //O método formData() retorna um objeto FormData que representa os dados contidos no corpo do formulário\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password'),\n  };\n\n  fetch('http://localhost:8080/' + mode);\n}"],"mappings":";AAAA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,oBAAOD,OAAA,CAACF,QAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB;AAACC,EAAA,GAFQL,kBAAkB;AAI3B,eAAeA,kBAAkB;AAEjC,OAAO,eAAeM,MAAMA,CAAC;EAACC;AAAO,CAAC,EAAE;EAEtC,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACF,YAAY,CAAC,CAAC;EACxD,MAAMG,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC;EAClD;;EAEA,IAAGD,IAAI,KAAG,OAAO,IAAIA,IAAI,KAAG,QAAQ,EAAE;IACpC,MAAMf,IAAI,CAAC;MAACiB,OAAO,EAAE;IAAc,CAAC,EAAE;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;EACtD;EAEA,MAAMC,IAAI,GAAG,MAAMR,OAAO,CAACS,QAAQ,CAAC,CAAC,CAAC,CAAC;EACvC,MAAMC,QAAQ,GAAG;IACfC,KAAK,EAAEH,IAAI,CAACH,GAAG,CAAC,OAAO,CAAC;IACxBO,QAAQ,EAAEJ,IAAI,CAACH,GAAG,CAAC,UAAU;EAC/B,CAAC;EAEDQ,KAAK,CAAC,wBAAwB,GAAGT,IAAI,CAAC;AACxC;AAAC,IAAAN,EAAA;AAAAgB,YAAA,CAAAhB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}